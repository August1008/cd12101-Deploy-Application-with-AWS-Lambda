service: serverless-todo-app
useDotenv: true
plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-offline

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  timeout: 300
  profile: annb16
  stage: ${opt:stage, 'dev'}
  tracing: 
    lambda: true
    apiGateway: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
  region: ${opt:region, 'us-east-1'}
  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    TODOS_TODOID_INDEX: TodoIdIndex
    AWS_ACCESS_KEY_TEST: '${env:AWS_ACCESS_KEY}'
    AWS_SECRET_ACCESS_KEY_TEST: '${env:AWS_SECRET_ACCESS_KEY}'
    S3_BUCKET: 'udacity-annb16-cloud-developer-final-project'


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          authorizer: Auth
          path: todos
          cors: true
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:${self:provider.region}:880825034145:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          authorizer: Auth
          path: todos
          cors: true
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:880825034145:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:880825034145:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:880825034145:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          authorizer: Auth
          cors: true

resources:
  Resources:
    UdacityBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: udacity-annb16-cloud-developer-final-project
        #AccessControl: PublicReadWrite
        OwnershipControls:  # << Add
          Rules:
            - ObjectOwnership: ObjectWriter
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
        CorsConfiguration:
          CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - HEAD
            AllowedOrigins:
              - '*'
    UdacityBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: !Ref UdacityBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - 's3:GetObject'
                - 's3:PutObject'
              Effect: Allow
              Resource:
                - !Sub 'arn:aws:s3:::${UdacityBucket}'
                - !Sub 'arn:aws:s3:::${UdacityBucket}/*'
              Principal: '*'
    TodosTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        GlobalSecondaryIndexes:
        - IndexName: ${self:provider.environment.TODOS_TODOID_INDEX}
          KeySchema:
          - AttributeName: todoId
            KeyType: HASH
          Projection:
            ProjectionType: ALL
        LocalSecondaryIndexes:
        - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL # What attributes will be copied to an index